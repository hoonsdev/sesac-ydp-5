<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title %></title>
    <!-- jQuery CDN -->
    <script
      src="https://code.jquery.com/jquery-3.7.0.min.js"
      integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g="
      crossorigin="anonymous"
    ></script>
    <!-- Axios CDN -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
      .result {
        margin-top: 10px;
      }
      .result span {
        color: blue;
        font-size: 24px;
        font-weight: 700;
      }
    </style>
  </head>
  <body>
    <h1>동적 폼 전송을 연습해보자</h1>

    <!-- 이름, 성별(라디오버튼)을 정보로 입력받는 폼 -->
    <form name="register">
      <label for="name">이름</label>
      <input type="text" id="name" name="name" required />
      <br />

      <input type="radio" id="male" name="gender" value="남자" required />
      <label for="male">남자</label>
      <input type="radio" id="female" name="gender" value="여자" />
      <label for="female">여자</label>
      <br />

      <button type="button" onClick="ajaxGet()">Ajax Get 제출</button>
      <button type="button" onClick="ajaxPost()">Ajax Post 제출</button>
      <br />

      <button type="button" onClick="asyncAxiosGet()">
        Axios Get 제출 (+ form validation)
      </button>
      <button type="button" onClick="axiosPost()">Axios Post 제출</button>
      <br />

      <button type="button" onClick="fetchGet()">Fetch Get 제출</button>
      <button type="button" onClick="fetchPost()">Fetch Post 제출</button>
      <br />
    </form>

    <!-- 동적 폼 전송 결과를 보여줄 곳 -->
    <div class="result"></div>

    <hr />
    <h1>OPEN API를 이용해 고양이 사진 랜덤 돌리기!</h1>
    <button onClick="changeImg()">랜덤</button>
    <img
      width="500"
      height="500"
      src="https://w7.pngwing.com/pngs/633/239/png-transparent-mario-mario.png"
      alt="고양이사진"
    />

    <script>
      // frontend
      const img = document.querySelector('img');

      async function changeImg() {
        const res = await axios({
          method: 'get',
          url: 'https://api.thecatapi.com/v1/images/search',
        });
        console.log(res);
        const { data } = res;
        img.src = data[0].url; // img 태그의 src 속성을 open api에서 받아온 랜덤 이미지 주소로 변경
      }

      function ajaxGet() {
        console.log('ajaxGet 함수 호출!');

        // 폼 선택
        const form = document.forms['register'];
        console.log(form);

        // 폼 객체 요소 확인
        console.dir(form);
        console.dir(form.name);
        console.dir(form.gender);
        console.dir(form.name.value); // 이름 input에 입력한 값
        console.dir(form.gender.value); // 성별 radio input을 선택한 값

        // 요청에 실어서 보낼 데이터 변수 (서버에서 받을 정보)
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // Ajax로 서버에 Get 요청 보내기
        $.ajax({
          type: 'get', // 요청의 종류 (= form의 method 속성)
          url: '/ajax', // 요청의 경로 (=form의 action 속성)
          data: data, // 요청에 실어보낼 데이터 (서버가 받게 될 데이터)
          success: function (data) {
            // 요청이 성공적으로 수행되었을 때 실행할 함수
            // 여기서 인자 'data'는 서버가 전송한 req.query!
            console.log(data); // 여기서 console.log는 웹브라우저(프론트)의 콘솔에 찍힘.
            $('.result').html(
              `<span>GET /ajax 요청 완료! 안녕하세요 ${data.name}님! 성별은 ${data.gender} 이군요! </span>`
            );
          },
        });
      }

      function ajaxPost() {
        console.log('ajaxPost 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };
        $.ajax({
          type: 'post',
          url: '/ajax',
          data: data,
          success: function (data) {
            console.log(data);
            $('.result').html(
              `<span>POST /ajax 요청 완료! 안녕하세요 ${data.name}님! 성별은 ${data.gender} 이군요! </span>`
            );
          },
        });
      }

      function axiosGet() {
        console.log('axiosGet 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        console.log(form.name.checkValidity());
        // 같은 name으로 묶인 radio btn은 하나만 선택되더라도 true 반환!
        console.log(form.gender[0].checkValidity());
        console.log(form.gender[1].checkValidity());

        axios({
          method: 'get', // 요청 방식 (= form의 method 속성)
          url: '/axios', // 요청의 경로 (=form의 action 속성)
          params: data, // 서버로 보낼 데이터 (query string)
        })
          .then(function (response) {
            console.log(response); // 서버의 응답 결과
            console.log(response.data); // 서버의 응답 데이터를 확인
            //$('.result').html(
            //  `<span>GET /axios 요청 완료! 안녕하세요 ${response.data.name}님! 성별은 ${response.data.gender} 이군요! </span>`
            //);
            const { name, gender } = response.data;
            document.querySelector(
              '.result'
            ).innerHTML = `<span>GET /axios 요청 완료오! 안녕하세요 ${name}님! 성별은 ${gender} 이군요! </span>`;
          })
          .catch(function (err) {
            console.log('Error!', err);
          });
      }

      // axios 요청 처리 async/await로 변경
      async function asyncAxiosGet() {
        console.log('asyncAxiosGet 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        try {
          // 폼 유효성 검사
          // name input에 입력된 값이 없다면, '이름을 입력해주세요!'
          // gender radio btn을 선택하지 않았다면, '성별을 선택해주세요!'
          // 둘 다 입력이 잘 되었다면, axios로 back 에 요청 날리기
          if (!form.name.checkValidity()) {
            document.querySelector('.result').innerHTML =
              '<span>이름을 확인해주세요!</span>';
          } else if (!form.gender[0].checkValidity()) {
            document.querySelector('.result').innerHTML =
              '<span>성별을 선택해주세요!</span>';
          } else {
            const response = await axios({
              method: 'get',
              url: '/axios',
              params: data,
            });
            console.log(response); // 서버의 응답 결과 axios에서 response는 js obj는 맞는데, 우리가 원하는 내용보다 더 부가적인 내용이 추가되어 있어서
            const { name, gender } = response.data; // 이렇게 response.data 로 원하는 부분만 추출
            document.querySelector(
              '.result'
            ).innerHTML = `<span>GET /axios 요청 완료오호!!! 안녕하세요 ${name}님! 성별은 ${gender} 이군요! </span>`;
          }
        } catch (err) {
          resultBox.textContent = `알 수 없는 에러 발생! 다시 시도해주세요~`;
          console.log('Error!', error);
        }
      }

      function axiosPost() {
        console.log('axiosPost 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        axios({
          method: 'post',
          url: '/axios',
          data: data,
        })
          .then(function (response) {
            console.log(response);
            const { name, gender } = response.data;
            document.querySelector(
              '.result'
            ).innerHTML = `<span>POST /axios 요청 완료오호!!! 안녕하세요 ${name}님! 성별은 ${gender} 이군요! </span>`;
          })
          .catch(function (err) {
            console.log('Error!', err);
          });
      }

      async function asyncAxiosPost() {
        console.log('asyncAxiosPost 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        try {
          const response = await axios({
            method: 'post',
            url: '/axios',
            data: data,
          });

          console.log(response);
          const { name, gender } = response.data;
          document.querySelector(
            '.result'
          ).innerHTML = `<span>POST /axios 요청 완료오호!!! 안녕하세요 ${name}님! 성별은 ${gender} 이군요! </span>`;
        } catch (err) {
          console.log('Error!', err);
        }
      }

      // fetch(url, options)
      function fetchGet() {
        console.log('fetchGet 함수 호출!');

        const form = document.forms['register'];
        // fetch는 get 방식이 default로 작동 -> options 생략 가능
        fetch(`/fetch?name=${form.name.value}&gender=${form.gender.value}`)
          .then(function (response) {
            console.log(response);
            return response.json();
            // JSON 형태로 응답 데이터를 전달받음. 응답(response) 객체는 json() 메서드를 제공
            // 응답(response) 객체로부터 JSON 포맷의 응답 전문을 자바스크립트 객체(js obj)로 반환
            // 요기서 response는 JSON 형태 -> 우리가 js에서 사용할 수 있게 -> json() -> js obj!
            // !!! axios의 response.data 요 부분과 헷갈릴 수 있어서 목적이 다르다는걸 기억하기!!!
          })
          .then(function (data) {
            // data 변수 => 직전 then 메서드의 리턴값: response.json()
            console.log(data);
            document.querySelector(
              '.result'
            ).innerHTML = `<span>GET /fetch 요청 완료!!! 안녕하세요 ${data.name}님! 성별은 ${data.gender} 이군요! </span>`;
          });
      }

      function fetchPost() {
        console.log('fetchPost 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        }; // 서버에 넘겨줄 데이터

        // fetch를 이용해 post 요청을 날릴 때에는 option 객체가 반드시 필요함!
        // 1. method 키 post 지정
        // 2. headers 키 JSON 포맷 사용 선언
        // 3. body 키 서버로 보낼 데이터
        fetch('/fetch', {
          method: 'post',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
          // data: js obj
          // JSON.stringify(data): json 파일
        })
          .then(function (response) {
            console.log(response);
            return response.json();
          })
          .then(function (data) {
            console.log(data);
            document.querySelector(
              '.result'
            ).innerHTML = `<span>GET /fetch 요청 완료!!! 안녕하세요 ${data.name}님! 성별은 ${data.gender} 이군요! </span>`;
          });
      }
    </script>
  </body>
</html>
